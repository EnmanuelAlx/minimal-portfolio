---
import type { CollectionEntry } from 'astro:content';
import { getLangFromUrl, useTranslations } from '@/i18n/utils';
import { render } from 'astro:content';

const { works } = Astro.props as { works: CollectionEntry<'works'>[] };
const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

// Renderizar el contenido de cada trabajo de forma asíncrona
const renderedWorks = await Promise.all(
  works.map(async (work) => {
    const { name, startDate, endDate, position, isRemote } = work.data;
    const startDateString = new Date(startDate).toLocaleDateString('en-US', {
      month: 'short',
      year: 'numeric',
    });
    const endDateString = endDate
      ? new Date(endDate).toLocaleDateString('en-US', {
          month: 'short',
          year: 'numeric',
        })
      : t('currentDateString');
    
    // Renderizar el contenido si existe
    let Content = null;
    try {
      const { Content: RenderedContent } = await render(work);
      Content = RenderedContent;
    } catch (error) {
      console.warn(`Could not render content for work: ${name}`, error);
    }

    return {
      name,
      position,
      isRemote,
      startDateString,
      endDateString,
      Content,
      startDate // Mantener la fecha original para ordenamiento
    };
  })
);

// Ordenar por fecha de inicio: más reciente primero
const sortedWorks = renderedWorks.sort((a, b) => {
  return new Date(b.startDate).getTime() - new Date(a.startDate).getTime();
});

---

<ul>
  {
    sortedWorks.map((work) => (
      <li>
        <article>
          <header>
            <div>
              <div class="name">
                <h3>{work.name}</h3>
                {work.isRemote && <span class="tag">{t('remoteString')}</span>}  
              </div>
              <h4>{work.position}</h4>
            </div>
            <time>
              {work.startDateString} - {work.endDateString}
            </time>
          </header>
          {work.Content && (
            <footer class="prose max-w-none">
              <work.Content />
            </footer>
          )}
        </article>
      </li>
    ))
  }
</ul>

<style>

  

  .name {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 8px;
    color: var(--black-text); 
  }

  .tag {
    border-radius: 6px;
    background-color: var(--hover-background);
    color: var(--black-text);
    font-size: 0.75rem;
    font-weight: 500;
    padding: 0.2rem 0.6rem
  }

  ul {
    display: flex;
    flex-direction: column;
    gap: 32px;
  }

  article h3 {
    font-weight: 600;
    font-size: 1rem
    color: var(--black-text);
  }

  article h4 {
    font-weight: 500;
    font-size: 0.9rem;
    color: var(--black-text);
  }

  header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 8px;
  }

  time {
    font-size: 0.85rem;
    color: var(--darker-primary-text);
  }

@media (max-width: 500px) {
  
  header {
    flex-direction: column;
    gap: 4px;
  }
}
</style>
