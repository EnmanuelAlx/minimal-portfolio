---
import type { Project } from '@/content/config';
import { render } from 'astro:content';
import { getLangFromUrl, useTranslations } from '@/i18n/utils';
import GitHub from '@/icons/GitHub.astro';

const { projects } = Astro.props
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const renderedProjects = await Promise.all(
  projects.map(async (project: { data: Project }) => {
    let Content = null;

    try {
      const { Content: RenderedContent } = await render(project as any);
      Content = RenderedContent;
    } catch (error) {
      console.warn(`Could not render content for project: ${name}`, error);
    }

    return { Content, ...project.data };
  })
);

console.log(renderedProjects)
---

<ul>
  {
    renderedProjects.map((project) => (
      <li>
        <article>
          <header>
            <h3>
              <a
                href={project.url}
                title={`${t('projects.link')} ${project.name}`}
                target='_blank'>
                {project.name}
              </a>
              {project.isActive && <span>&bull;</span>}
              {project.github && (
                <a
                  class='github-code-link'
                  href={project.github}
                  target='_blank'
                  title={`${t('projects.sourceCode')} ${project.name}${t('projects.sourceCodeFollowing')}`}>
                  <GitHub />
                </a>
              )}
            </h3>
            <p><project.Content/></p>
          </header>
          <footer>
            {project.highlights.map((highlight: string) => (
              <span>{highlight}</span>
            ))}
          </footer>
        </article>
      </li>
    ))
  }
</ul>

<style>
  .github-code-link {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    height: 13px;
    width: 13px;
    transition: all 0.2s ease;
    margin-left: 4px;
  }

  .github-code-link:hover {
    transform: scale(1.1);
  }

  ul {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    margin-inline: -16px;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  article {
    border-radius: 8px;
    border: 1px solid var(--projects-background);
    gap: 16px;
    display: flex;
    flex-direction: column;
    padding: 16px;
    height: 100%;
  }

  article header {
    flex: 1;
  }

  article h3 {
    margin-bottom: 4px;
    font-weight: 600;
  }

  article h3 span {
    color: var(--projects-active);
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    margin-left: 2px;
  }

  article p {
    font-size: 0.75rem;
    line-height: 1.2rem;
    margin-bottom: 8px;
  }

  article a {
    color: var(--black-text);
  }

  article a:hover {
    text-decoration: underline;
  }

  footer {
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
    font-size: 0.6rem;
  }

  footer span {
    border-radius: 6px;
    background: var(--hover-background);
    color: var(--secondary-text);
    font-size: 0.6rem;
    font-weight: 500;
    padding: 0.2rem 0.6rem;
  }
</style>
