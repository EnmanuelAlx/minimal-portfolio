---
import type { Project } from '@/content/config';
import { render } from 'astro:content';
import { getLangFromUrl, useTranslations } from '@/i18n/utils';
import GitHub from '@/icons/GitHub.astro';

const { projects } = Astro.props
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const renderedProjects = await Promise.all(
  projects.map(async (project: { data: Project }) => {
    let Content = null;

    try {
      const { Content: RenderedContent } = await render(project as any);
      Content = RenderedContent;
    } catch (error) {
      console.warn(`Could not render content for project: ${name}`, error);
    }

    return { Content, ...project.data };
  })
);

---

<section aria-labelledby="projects-heading">
  <ul class="projects-grid" role="list">
    {
      renderedProjects.map((project) => (
        <li class="flex justify-center items-center">
          <article class="w-full max-w-sm">
            <header>
              <h3>
                <a
                  href={project.url}
                  title={`${t('projects.link')} ${project.name}`}
                  target='_blank'
                  rel="noopener noreferrer">
                  {project.name}
                </a>
                {project.isActive && <span aria-label="Proyecto activo">&bull;</span>}
                {project.github && (
                  <a
                    class='github-code-link'
                    href={project.github}
                    target='_blank'
                    rel="noopener noreferrer"
                    title={`${t('projects.sourceCode')} ${project.name}${t('projects.sourceCodeFollowing')}`}
                    aria-label={`Ver código fuente de ${project.name} en GitHub`}>
                    <GitHub />
                  </a>
                )}
              </h3>
              <div class="project-description">
                <project.Content/>
              </div>
            </header>
            <section class="project-technologies" aria-label="Tecnologías utilizadas">
              <ul class="technologies-list" role="list">
                {project.highlights.map((highlight: string) => (
                  <li class="technology-tag">{highlight}</li>
                ))}
              </ul>
            </section>
          </article>
        </li>
      ))
    }
  </ul>
</section>

<style>
  /* Grid dinámico basado en la cantidad de elementos */
  .projects-grid {
    display: grid;
    gap: 12px;
    place-items: center;
    margin-inline: -16px;
    flex-wrap: wrap;
    align-items: baseline;
  }


  /* 1 proyecto - una sola columna centrada */
  .projects-grid li:first-child:nth-last-child(1) {
    grid-column: 1;
  }
  .projects-grid:has(li:first-child:nth-last-child(1)) {
    grid-template-columns: 1fr;
    justify-content: center;
  }

  /* 2 proyectos - dos columnas */
  .projects-grid li:first-child:nth-last-child(2),
  .projects-grid li:first-child:nth-last-child(2) ~ li {
    display: flex;
  }
  .projects-grid:has(li:first-child:nth-last-child(2)) {
    grid-template-columns: repeat(2, 1fr);
  }

  /* 3 proyectos - tres columnas */
  .projects-grid li:first-child:nth-last-child(3),
  .projects-grid li:first-child:nth-last-child(3) ~ li {
    display: flex;
  }
  .projects-grid:has(li:first-child:nth-last-child(3)) {
    grid-template-columns: repeat(3, 1fr);
  }

  /* Más de 3 proyectos - máximo 3 columnas */
  .projects-grid:has(li:nth-child(4)) {
    grid-template-columns: repeat(3, 1fr);
  }

  /* Responsive para 2 proyectos */
  @media (max-width: 640px) {
    .projects-grid:has(li:first-child:nth-last-child(2)) {
      grid-template-columns: 1fr;
    }
  }

  /* Responsive para 3 proyectos */
  @media (max-width: 768px) {
    .projects-grid:has(li:first-child:nth-last-child(3)) {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 640px) {
    .projects-grid:has(li:first-child:nth-last-child(3)) {
      grid-template-columns: 1fr;
    }
  }

  /* Responsive para más de 3 proyectos */
  @media (max-width: 768px) {
    .projects-grid:has(li:nth-child(4)) {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 640px) {
    .projects-grid:has(li:nth-child(4)) {
      grid-template-columns: 1fr;
    }
  }

  .github-code-link {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    height: 13px;
    width: 13px;
    transition: all 0.2s ease;
    margin-left: 4px;
  }

  .github-code-link:hover {
    transform: scale(1.1);
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  article {
    border-radius: 8px;
    border: 1px solid var(--projects-background);
    gap: 16px;
    display: flex;
    flex-direction: column;
    padding: 16px;
    height: 100%;
  }

  article header {
    flex: 1;
  }

  article h3 {
    margin-bottom: 4px;
    font-weight: 600;
  }

  article h3 span {
    color: var(--projects-active);
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    margin-left: 2px;
  }

  .project-description {
    font-size: 0.75rem;
    line-height: 1.2rem;
    margin-bottom: 8px;
  }

  article a {
    color: var(--black-text);
  }

  article a:hover {
    text-decoration: underline;
  }

  .project-technologies {
    margin-top: auto;
  }

  .technologies-list {
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
    font-size: 0.6rem;
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .technology-tag {
    border-radius: 6px;
    background: var(--hover-background);
    color: var(--secondary-text);
    font-size: 0.6rem;
    font-weight: 500;
    padding: 0.2rem 0.6rem;
  }
</style>
